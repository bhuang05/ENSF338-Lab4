import matplotlib.pyplot as plt
import timeit 
import random

# Efficient
def binarysearch(data, first, last, key):
    if(first <= last):
        mid = (first+last) // 2
        if(key == data[mid]):
            return mid
        elif (key < data[mid]):
            return binarysearch(data, first, mid-1, key)
        elif (key > data[mid]):
            return binarysearch(data, mid+1, last, key)
    return -1

# Inefficient
def linearsearch(data, key):
    for index, val in enumerate(data):
        if val == key:
            return index
    return -1    

# 4. Worst case for the binary search is O(logn). Worst case for the linear search is O(n)

sizes = [1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000]



fig1, axs1 = plt.subplots(2, 2, figsize=(20, 10))
fig1.suptitle('Histogram of Execution Times for Binary Search vs Linear Search (Sizes 1000 to 8000)')

for i, size in enumerate(sizes[:4]):
    lintimes = []
    bintimes = []
    data = list(range(size))

    for _ in range(100):  
        key = random.choice(data)
        bintime = timeit.timeit(lambda: binarysearch(data, 0, len(data) - 1, key), number=1)
        bintimes.append(bintime)
        lintime = timeit.timeit(lambda: linearsearch(data, key), number=1)
        lintimes.append(lintime)


    # Code for plotting generated by ChatGPT
    row = i // 2
    col = i % 2
    axs1[row, col].yaxis.set_major_locator(plt.MaxNLocator(integer=True))
    axs1[row, col].hist(bintimes, bins=50, alpha=1, label='Binary Search', density=False)
    axs1[row, col].hist(lintimes, bins=50, alpha=0.3, label='Linear Search', density=False)
    axs1[row, col].set_title(f'Size: {size}')
    axs1[row, col].set_xlabel('Execution Time (s)')
    axs1[row, col].set_ylabel('Frequency')
    axs1[row, col].legend()

plt.show()

fig2, axs2 = plt.subplots(2, 2, figsize=(20, 10))
fig2.suptitle('Histogram of Execution Times for Binary Search vs Linear Search (Sizes 16000 to 128000)')

for i, size in enumerate(sizes[4:]):
    lintimes = []
    bintimes = []
    data = list(range(size))

    for _ in range(100):  
        key = random.choice(data)
        bintime = timeit.timeit(lambda: binarysearch(data, 0, len(data) - 1, key), number=1)
        bintimes.append(bintime)
        lintime = timeit.timeit(lambda: linearsearch(data, key), number=1)
        lintimes.append(lintime)

    # Code for plotting generated by ChatGPT
    row = i // 2
    col = i % 2
    axs2[row, col].yaxis.set_major_locator(plt.MaxNLocator(integer=True))
    axs2[row, col].hist(bintimes, bins=50, alpha=1, label='Binary Search', density=False)
    axs2[row, col].hist(lintimes, bins=50, alpha=0.3, label='Linear Search', density=False)
    axs2[row, col].set_title(f'Size: {size}')
    axs2[row, col].set_xlabel('Execution Time (s)')
    axs2[row, col].set_ylabel('Frequency')
    axs2[row, col].legend()

plt.show()

#Once it hits the larger data sets, the binary search is that much faster and spread out than the linear search so it may not appear clearly on the histograms. 