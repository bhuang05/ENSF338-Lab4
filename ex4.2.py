import matplotlib.pyplot as plt
import timeit 
import random

def binarysearch(data, first, last, key):
    if(first <= last):
        mid = (first+last) // 2
        if(key == data[mid]):
            return mid
        elif (key < data[mid]):
            return binarysearch(data, first, mid-1, key)
        elif (key > data[mid]):
            return binarysearch(data, mid+1, last, key)
    return -1

def linearsearch(data,key):
    for index, val in enumerate(data):
        if val == key:
            return index
        
sizes = [1000, 2000, 4000, 8000, 16000, 32000, 64000, 128000]


#Code for plotting generated by ChatGPT
fig, axs = plt.subplots(2, 4, figsize=(20, 10))
fig.suptitle('Histogram of Execution Times for Binary Search vs Linear Search')

for i, size in enumerate(sizes):
    lintimes = []
    bintimes = []
    data = list(range(size))

    for _ in range(100):  
        key = random.choice(data)
        bintime = timeit.timeit(lambda: binarysearch(data, 0, len(data) - 1, key), number=1)
        bintimes.append(bintime)
        lintime = timeit.timeit(lambda: linearsearch(data, key), number=1)
        lintimes.append(lintime)

    row = i // 4
    col = i % 4
    axs[row, col].hist(bintimes, bins=20, alpha=0.5, label='Binary Search')
    axs[row, col].hist(lintimes, bins=20, alpha=0.5, label='Linear Search')
    axs[row, col].set_title(f'Size: {size}')
    axs[row, col].set_xlabel('Execution Time (s)')
    axs[row, col].set_ylabel('Frequency')
    axs[row, col].legend()

plt.show()
